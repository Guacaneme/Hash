import DoublyLinkList

class TablaHash:
    def __init__(self,n):
        self.n_el = 0
        self.N = n
        self.r = self.NearPrime(n)
        self.table = [[None,None]] * n
    
    def NearPrime(self, n):
        if n > 2:
            num = n-1
            while True:
                primo = True
                for x in range(2,num):
                    if num%x == 0:
                        primo = False
                        break
                if primo == True:
                    return num
                num -= 1
        else:
            raise Exception("Out of range")

    # FunciÃ³n hash
    def Hash_func(self, value, i):
        try:
            h2 = self.r - (value % self.r)
            f = i * h2
            return (value + f) % self.N
        except:
            raise Exception("Hashing Error")

    def rehashing(self):
        n = self.N
        copy = TablaHash(n*2)
        for d in self.table:
            if d[0] != None:
                copy.Insert(d[0],d[1])
        self.n_el = copy.n_el
        self.N = copy.N
        self.r = copy.r
        self.table = copy.table

    def Insert(self, llave, valor): # Metodo para ingresar elementos
        self.n_el += 1
        if (self.n_el/self.N) > 0.75:
            self.rehashing()
        i = 0
        while True:
            hash = self.Hash_func(llave,i)
            if hash < self.N:
                if self.table[hash][0] is None:
                    self.table[hash] = [llave,valor]
                    return
                else:
                    i += 1

    def PrintHash(self):
        for d in range(self.N):
            print(f"{d} -> {self.table[d]}")

    def Search(self,value): # Metodo para buscar elementos
        hash = self.Hash_func(value)
        if self.table[hash] is None:
            return None
        else:
            return hex(id(self.table[hash]))
  
    def Remove(self,value): # Metodo para eleminar elementos
        hash = self.Hash_func(value)
        if self.table[hash] is None:
            print("No hay elementos con ese valor", value)
        else:
            print("Elemento con valor", value, "eliminado")
            self.table[hash] is None

def main():
    t = TablaHash(3)
    while True:
        t.Insert(int(input("Llave: ")),input("Valor: "))
        t.PrintHash()

main()